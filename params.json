{
  "name": "Project Cornell Off-Campus Housing",
  "tagline": "",
  "body": "## Welcome to our team project Cornell Off-Campus Housing\r\nEach year, Cornell students have difficulty finding the perfect housing for the upcoming\r\nacademic year. Many Cornell students do not have a car as they often travel from distant\r\nlocations via plane, so finding an apartment that lends itself to walking is extremely\r\nimportant. These convenient locations are extremely desireable, so they also typically have\r\nextremely high rent. Sifting through the available listings to find an apartment in a good,\r\nwalkable location with reasonable rent is difficult, primarily due to the lack of useful tools\r\nthat facilitate obtaining the necessary information to compare different options and to make\r\nthe right decision. Although Cornell does offer the Off Housing Listing Service\r\n( https://sf‐sas‐app‐002.serverfarm.cornell.edu:7793/och ), it simply gives a list of all the\r\nhousing depending on the filters selected and does not provide much insight unless the\r\nstudent already knows what specific type of housing one is looking for.\r\n\r\nBy plotting available housings on an interactive map and providing different visual cues for\r\nthe rent and the walkability, we believe our visualization greatly helps students spot\r\naffordable as well as convenient housings at a glance. A student unfamiliar with Ithaca that is\r\nlooking for housing can easily see how the walkability of an apartment location translates to\r\nthe cost of rent in this area. In addition, an outlier that has a good Walk Score but also fairly\r\ncheap rent will be clearly identified as a green, opaque point, so someone searching for an\r\napartment can easily find them. Lastly, the ability to hover over a point to get more\r\ninformation about a listing provides a good balance of information ‐ the map doesn’t cause\r\ninformation overload at a glance, but all of the data is easily available if someone is\r\ninterested in a particular listing.\r\n\r\n\r\n## Data\r\nFirst, we obtained the off‐campus housing data from Cornell University’s Off Campus Housing\r\nListing Services (https://sf‐sas‐app‐002.serverfarm.cornell.edu:7793/och). We wrote a jQuery\r\nscript to scrape the data and save it as a json file. This first set of data included:\r\n● Address : the address of the housing\r\n\r\n● Date available : when the housing is available\r\n● Neighborhood : region which the housing belongs to\r\n● Rent : rent per month\r\n● Lease length : minimum length of the lease\r\n● Bedrooms : number of rooms\r\n● Distance : distance from Cornell University\r\n\r\nTo allow users to compare rent more easily across all housings regardless of the bedroom\r\ncounts, we created an extra variable: rent per person. We divided the rent by the number of\r\nbedrooms, assuming that each bedroom (including the studio) will hold only one person\r\n\r\n● Rent per person : arithmetic average of rent per bedroom\r\n\r\nSecond, to quantify the walkability of each housing, we collected Walk Scores from\r\nWalkScore.com ( https://www.walkscore.com ). Then, to later plot housings on a map, we\r\nconverted each address into latitude and longitude using LatLong.net\r\n( http://www.latlong.net ). So our second set of data included:\r\n● Address : the address of the housing\r\n● Walk Score : Walk Score of the housing\r\n● Latitude : latitude coordinate of the address\r\n● Longitude : longitude coordinate of the address\r\nNext, we needed to clean and merge our data. We noticed some unreasonable values for the\r\nrent: for example, the rent for a housing with 4 bedrooms located in Collegetown was\r\n$600/month, which clearly seemed like it was the rent for one bedroom in a 4 bedroom\r\nhousing rather than the rent for all 4 bedrooms. So, taking the number of bedrooms and the\r\nlocation into consideration, we re‐examined the rent per person for each listing (paying close\r\nattention to housings with less than $400 rent per person). Finally, our JavaScript code that\r\npowers the visualization merges these two data sets as its first step, using the address as the\r\nkey, so that all of the data can be used easily.\r\n\r\n## Visualization\r\nWe wanted to visualize our data on a single map so that the users can easily determine\r\nwhether the rent is reasonable based on the location and whether that place convenient for\r\nthose without a car. We used Google Maps API to provide zooming, local businesses and\r\nservices information, and street views and used the JavaScript D3 library to plot each listing\r\non the map as a circle.\r\n\r\nWe used color to represent different levels of rent per bedroom. As it is common that green is\r\nused for indicating underbudget and red is used for indicating overbudget, we set the color\r\nfrom green to red as a linear scale for the domain of 100‐1800. We hardcoded this scale for\r\nour dataset (and set our slider to match) rather than simply using the minimum and maximum\r\nrent values because otherwise a single outlier could completely skew the results. This would\r\nstill be valid if this dataset were to be updated in the future as rent in Ithaca does not change\r\nthat drastically from year‐to‐year, but may need to be changed if this were to be reused with\r\nanother location (such as San Francisco, for example).\r\n\r\nvar colorScale = d3.scale.linear().domain([100,900,1800]).range([\"green\",\"yellow\",\"red\"]);\r\n\r\nWe used opacity to represent different levels of Walk Score. In order to help our users to\r\nmore easily identify housings that are convenient for living, we set higher opacity for those\r\nwith high Walk Scores (so that they are more visible) and lower opacity for those with lower\r\nWalk Scores. Note that a WalkScore of zero does not make the point fully transparent, as we\r\nwant those locations to still be visible on the map ‐ thus, the opacity ranges from 0.2 to 1. In\r\naddition, regardless of the Walk Score the border of the point is fully opaque, to make sure\r\nthe points can be found easily.\r\n\r\nvar opacityScale = d3.scale.linear().domain([0,100]).range([0.2,1]);\r\n\r\nIn order to make our data circles more noticeable, we transformed the map which originally\r\nhad many colors into grayscale, so that the color scale we used to indicate the cost of rent\r\nwas more noticeable.\r\n\r\nBy using D3 and jQuery, we created three filters which dynamically updates the points on the\r\nmap based on the criteria of the user, so that they can find all the possible housing within\r\ntheir budget and desired walkability and ignore listings that aren’t suitable (such as those\r\nwith many bedrooms when they intend on living by themselves):\r\n\r\n● Room type selector : Number of bedrooms in the apartment (or Studio)\r\n● Rent selector : Selects the range of rent per bedroom ‐ when a new Room Type is\r\nselected, this will change to match the minimum and maximum rent per person of that\r\nroom type.\r\n● Walk Score selecto r: Walk Score from 0 to 100\r\n\r\nFinally, we added a hover‐over action to each data circle to display a popup information\r\nwindow that displays more detailed information for that housing such as neighborhood,\r\ndistance to Cornell, date available, lease length, etc., to make that data available in case the\r\nuser is interested in a particular listing without incurring information overload on the main\r\nmap.\r\n\r\n## Citations\r\nSource of dataset:\r\n● Cornell University’s Off Campus Housing Listing Service:\r\nhttps://sf‐sas‐app‐002.serverfarm.cornell.edu:7793/och\r\n● Walk Score: https://www.walkscore.com\r\n● Latitude & Longitude: http://www.latlong.net\r\nReference:\r\n● Google Maps APIs: https://developers.google.com/maps\r\n● Google Maps + D3: http://bl.ocks.org/mbostock/899711",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}